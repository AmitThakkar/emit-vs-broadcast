{
  "name": "Emit Vs Broadcast",
  "tagline": "This repository is for exploring $emit and  $broadcast in AngularJS.",
  "body": "# Emit vs Broadcast\r\n\r\nThis repository is for exploring **$emit** and **$broadcast** in **AngularJS**.\r\n\r\nMany a times, we need the ```publisher/subscriber``` functionality to achieve our requirement. And when we are working on **AngularJS**, then we write our **AngularJS** code in modular/component form and many of those components/modules are independent components/modules.\r\n\r\nNow suppose, we want to access a value in multiple **controllers**, so to make that value accessible to all those **controllers**, we put that value in parent **scope**, and as I said before, ```we write our AngularJS code in modular/component form and many of those components/modules are independent components/modules(e.g. isolated scope directive whose parent scope is only $rootScope)``` then **$rootScope** is the only option left as common parent **scope** for all the controller/components. And if we store that value in **$rootScope** then all the **controllers/components** can read/update that value and if one **controller/component** updates **$rootScope** property then other **component/controller** will get updated value and dependent values will get updated as **AngularJS** ```$digest``` cycle will complete.\r\n\r\nAs we are adding the value in **$rootScope** so it will be accessible from whole **AngularJS** application which might be not good approach. Well, then where can we store data which is common among multiple controllers?\r\n\r\nWe have one more option to store the common data in **AngularJS**, that is [**Factory**, **Service**](https://amitthakkar.github.io/Providers-In-AngularJS/). But if any of the **controller/component** updates any value, others will not get know that value has changed.\r\n\r\nTo counter this situation, **AngularJS** provides **$on, $emit/$broadcast** api methods to use ```pub/sub``` pattern. We can register **subscribers** with **$on** api **function** and publisher can **publish** messages with **$emit/$broadcast** api **function**.\r\n\r\n> Now you would be thinking, why there are 2 api functions for publishing the message? $emit and $broadcast ?\r\n\r\n**$emit**: When we **emit** a message then all the listeners/subscribes will be called which are registered on those **scopes** which are visible on parent element/node in DOM and on that **scope** which is used to **emit** the message.\r\n\r\n**$broadcast**: When we **broadcast** a message then all the listeners/subscribers will be called which are registered on those **scopes** which are visible on child element/node in DOM and on that **scope** which is used to **broadcast** the message.\r\n\r\nEnough for theory, lets see how to bind listeners and how to **broadcast/emit** messages:\r\n\r\nBinding a **listener** on event \"EventFromAController\":\r\n```JavaScript\r\n$scope.$on('EventFromAController', function (event, data) {\r\n    console.log(data, \"In isolatedScopeDirective\");\r\n});\r\n```\r\n\r\n**emitting** a message on event \"EventFromAController\":\r\n```JavaScript\r\n$scope.$emit('EventFromAController', \"EmitEventFromAController with $scope.$emit\");\r\n```\r\n\r\n**broadcasting** a message on event \"EventFromAController\":\r\n```JavaScript\r\n$scope.$broadcast('EventFromAController', \"EmitEventFromAController with $scope.$emit\");\r\n```\r\n\r\nLets see a demo:\r\n\r\n**emit-vs-broadcast.html**\r\n```HTML\r\n<!DOCTYPE html>\r\n<html ng-app=\"emitVSbroadcastApp\">\r\n<head>\r\n    <title>Providers Test</title>\r\n    <!-- Require AngularJS -->\r\n    <script type=\"application/javascript\" src=\"./js/angular.min.js\"></script>\r\n    <!-- Require providers-test JS -->\r\n    <script type=\"application/javascript\" src=\"./js/emitVSbroadcast.js\"></script>\r\n</head>\r\n<body>\r\n<div ng-controller=\"AParentController\">\r\n    <div ng-controller=\"AController\">\r\n        <button ng-click=\"testEvent()\">Event Test</button>\r\n        <div ng-controller=\"AChildController\">\r\n            <div isolated-scope-directive2></div>\r\n        </div>\r\n    </div>\r\n    <div ng-controller=\"BController\">\r\n    </div>\r\n</div>\r\n<div isolated-scope-directive></div>\r\n</body>\r\n</html>\r\n```\r\n\r\n**emitVSbroadcast.js**\r\n```JavaScript\r\n/**\r\n * Created by Amit Thakkar on 11/02/15.\r\n */\r\n(function (ng) {\r\n    var emitVSbroadcastApp = ng.module(\"emitVSbroadcastApp\", []);\r\n    emitVSbroadcastApp.controller(\"AParentController\", function ($scope) {\r\n        $scope.$on('EventFromAController', function (event, data) {\r\n            console.log(data, \"In AParentController\");\r\n        });\r\n    });\r\n    emitVSbroadcastApp.controller(\"AController\", function ($scope, $rootScope) {\r\n        $scope.testEvent = function () {\r\n            console.log(\"$scope.$emit result:\");\r\n            $scope.$emit('EventFromAController', \"EmitEventFromAController with $scope.$emit\");\r\n            console.log(\"\\n\\n\\n$scope.$broadcast result:\");\r\n            $scope.$broadcast('EventFromAController', \"BroadcastEventFromAController with $scope.$broadcast\");\r\n            console.log(\"\\n\\n\\n$rootScope.$emit result:\");\r\n            $rootScope.$emit('EventFromAController', \"EmitEventFromAController with $rootScope.$emit\");\r\n            console.log(\"\\n\\n\\n$rootScope.$broadcast result:\");\r\n            $rootScope.$broadcast('EventFromAController', \"BroadcastEventFromAController with $rootScope.$broadcast\");\r\n        };\r\n        $scope.$on('EventFromAController', function (event, data) {\r\n            console.log(data, \"In AController\");\r\n        });\r\n    });\r\n    emitVSbroadcastApp.controller(\"AChildController\", function ($scope) {\r\n        $scope.$on('EventFromAController', function (event, data) {\r\n            console.log(data, \"In AChildController\");\r\n        });\r\n    });\r\n    emitVSbroadcastApp.controller(\"BController\", function ($scope) {\r\n        $scope.$on('EventFromAController', function (event, data) {\r\n            console.log(data, \"In BController\");\r\n        });\r\n    });\r\n    emitVSbroadcastApp.directive(\"isolatedScopeDirective\", function () {\r\n        return {\r\n            scope: {},\r\n            controller: function ($scope) {\r\n                $scope.$on('EventFromAController', function (event, data) {\r\n                    console.log(data, \"In isolatedScopeDirective\");\r\n                });\r\n            }\r\n        }\r\n    });\r\n    emitVSbroadcastApp.directive(\"isolatedScopeDirective2\", function () {\r\n        return {\r\n            scope: {},\r\n            controller: function ($scope) {\r\n                $scope.$on('EventFromAController', function (event, data) {\r\n                    console.log(data, \"In isolatedScopeDirective2\");\r\n                });\r\n            }\r\n        }\r\n    });\r\n}(angular));\r\n```\r\n\r\n> You might be thinking that isolated scope directives get inherited by $rootScope only so if we broadcast a message with any other scope(which is not $rootScope and not that isolated scope) then those listeners will not called which are registered with isolated scope. Then you are wrong! You are missing a key point of this blog:\r\n\r\n**When we broadcast a message then all the listeners/subscribers will be called which are registered on those scopes which are visible on child element/node in DOM and on that scope which is used to broadcast the message.**\r\n\r\nSo if isolated scope directive is marked on child element/node of that **scope** then **listeners** of **isolated scope** will be called.\r\n\r\n**How to run this Demo ??** You can clone this working demo from [Github link](https://github.com/AmitThakkar/emit-vs-broadcast). And then open **emit-vs-broadcast.html** into your favourite browser.\r\n\r\nYou will notice we have 7 scope as shown here in diagram:\r\n\r\n![DOMScope](https://raw.githubusercontent.com/AmitThakkar/emit-vs-broadcast/master/images/DOMScope.png)\r\n\r\nFew Things:\r\n\r\n1. If we **broadcast** any message with **$rootScope**, then all the **subscribers/listeners** will be called because all the HTML nodes are directly or indirectly children of ```ng-app``` node.\r\n2. If we **emit** any message with **$$rootScope**, then only those **subscribers/listeners** will be called which are registered with **$rootScope** because there is no parent **AngularJS** node.\r\n3. If we **broadcast** any message with **\"A Controller Scope\"**, then only those **subscribers/listeners** will be called which are registered with **\"A Controller Scope\"**, **\"A Child Controller Scope\"** and **\"isolated Scope directive 2\"**. Because **\"A Child Controller Scope\"** and **\"isolated Scope directive 2\"** are visible on child node of **\"A Controller Scope\"**.\r\n\r\nNow click on button ![Test Event](https://raw.githubusercontent.com/AmitThakkar/emit-vs-broadcast/master/images/button.png) in the browser, you will see output:\r\n\r\n![Output](https://raw.githubusercontent.com/AmitThakkar/emit-vs-broadcast/master/images/output.png)\r\n\r\nIn the output, you will notice that, when we are **broadcast**ing a message with **$rootScope** then all the registered **subscribers/listeners** are getting called and when we are **emitting** a message with **$rootScope**, then no **subscriber/listener** is getting called because there are no **subscriber/listeners** registered with **$rootScope**.\r\n\r\n> Best Practice: Register subscribers/listeners with $rootScope and emit messages with $rootScope only so AngularJS does not have to traverse complete DOM tree to find all the listeners.\r\n\r\nFollow Me\r\n---\r\n[Github](https://github.com/AmitThakkar)\r\n\r\n[Twitter](https://twitter.com/amit_thakkar01)\r\n\r\n[LinkedIn](https://in.linkedin.com/in/amitthakkar01)\r\n\r\n[More Blogs By Me](http://amitthakkar.github.io/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}